
# This file is Copyright (c) 2020 Gregory Davill <greg.davill@gmail.com>
# License: BSD

import os
import subprocess
import sys

from litex.build.generic_platform import *
from litex.build.sim import SimPlatform


from migen.fhdl.structure import _Fragment
from litex import get_data_mod
from litex.build import tools
from litex.build.generic_platform import *



_io = [
    ("clk", 0, Pins(1)),
    ("rst", 0, Pins(1)),

    ("video", 0,
        Subsignal("red", Pins(8)),
        Subsignal("green", Pins(8)),
        Subsignal("blue", Pins(8)),
        Subsignal("hsync",  Pins(1)),
        Subsignal("vsync",    Pins(1)),
    ),

    ("btn", 0,
        Subsignal("a", Pins(1)),
        Subsignal("b", Pins(1)),
    )
]

_connectors = []



class Platform(SimPlatform):
    def __init__(self, toolchain="verilator"):
        if toolchain == "cxxrtl":
            self.toolchain = SimCxxrtlToolchain()
            GenericPlatform.__init__(self, 'sim', _io, _connectors, name='sim')
            self.sim_requested = []
        else:
            SimPlatform.__init__(self,
                             "sim",
                             _io,
                             _connectors,
                             toolchain=toolchain)

    def create_programmer(self):
        raise ValueError("programming is not supported")



_yosys_template = [
    "verilog_defaults -push",
    "verilog_defaults -add -defer",
    "{read_files}",
    "verilog_defaults -pop",
    "hierarchy -check -top {build_name}",
    "write_cxxrtl -O5 {build_name}.cc"
]

def _yosys_import_sources(platform):
    includes = ""
    reads = []
    for path in platform.verilog_include_paths:
        includes += " -I" + path
    for filename, language, library in platform.sources:
        reads.append("read_{}{} {}".format(
            language, includes, filename))
    return "\n".join(reads)

def _build_yosys(template, platform, build_name):
    ys = []
    for l in template:
        ys.append(l.format(
            build_name = build_name,
            read_files = _yosys_import_sources(platform)
        ))
    tools.write_to_file(build_name + ".ys", "\n".join(ys))

# Script -------------------------------------------------------------------------------------------

_build_template = [
    "yosys -l {build_name}.rpt {build_name}.ys",
    "clang++ -I/usr/local/share/yosys/include -I/usr/include/SDL2 -I. -O3 -std=c++11 -fno-exceptions -lSDL2 -o sim_driver ../../sim_driver.cc"
]

def _build_script(build_name):
    if sys.platform in ("win32", "cygwin"):
        script_ext = ".bat"
        script_contents = "@echo off\nrem Autogenerated by LiteX / git: " + tools.get_litex_git_revision() + "\n\n"
        fail_stmt = " || exit /b"
    else:
        script_ext = ".sh"
        script_contents = "# Autogenerated by LiteX / git: " + tools.get_litex_git_revision() + "\nset -e\n"
        fail_stmt = ""

    for s in _build_template:
        s_fail = s + "{fail_stmt}\n"  # Required so Windows scripts fail early.
        script_contents += s_fail.format(
            build_name      = build_name,
            fail_stmt       = fail_stmt,
            )

    script_file = "build_" + build_name + script_ext
    tools.write_to_file(script_file, script_contents, force_unix=False)

    return script_file

def _run_script(script):
    if sys.platform in ("win32", "cygwin"):
        shell = ["cmd", "/c"]
    else:
        shell = ["bash"]

    if subprocess.call(shell + [script]) != 0:
        raise OSError("Subprocess failed")

    
class SimCxxrtlToolchain:
    def build(self, platform, fragment, build_dir="build", build_name="sim",
            build=True, run=True):

        # Create build directory
        os.makedirs(build_dir, exist_ok=True)
        cwd = os.getcwd()
        os.chdir(build_dir)

        if build:
            # finalize design
            if not isinstance(fragment, _Fragment):
                fragment = fragment.get_fragment()
            platform.finalize(fragment)

            # generate top module
            top_output = platform.get_verilog(fragment,
                name=build_name, dummy_signal=False, regular_comb=False, blocking_assign=True)
            named_sc, named_pc = platform.resolve_signals(top_output.ns)
            top_file = build_name + ".v"
            top_output.write(top_file)
            platform.add_source(top_file)

            _build_yosys(_yosys_template, platform, 'sim')

            # Generate build script
            script = _build_script(build_name)
            _run_script(script)

            os.chdir(cwd)

            # generate cpp header/main/variables
            #_generate_sim_h(platform)
            #_generate_sim_cpp(platform, trace, trace_start, trace_end)
            #_generate_sim_variables(platform.verilog_include_paths)

            # generate sim config
            #if sim_config:
            #    _generate_sim_config(sim_config)

            # build
            #_build_sim(build_name, platform.sources, threads, coverage, opt_level, trace_fst)

        